services:

  jobmanager:
    container_name: vv-langchain-flink-jm
    image: ververica-langchain4j:0.0.1-SNAPSHOT
    profiles:
      - flink
    user: "0:0"
    ports:
      - "8082:8081"
    depends_on:
      kafka:
        condition: service_healthy
    command: >
      standalone-job 
      --job-classname com.evoura.ververica.langchain4j.stream.VervericaLangchain4jApplication 
      --kafka-broker-url kafka:9094
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.port: 8081
        state.backend: rocksdb
        state.backend.incremental: true
        classloader.resolve-order: parent-first
        KAFKA_BROKER: kafka_broker:29092
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "/dev/null", "localhost:8081"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
  taskmanager:
    container_name: vv-langchain-flink-tm
    image: ververica-langchain4j:0.0.1-SNAPSHOT
    profiles:
      - flink
    user: "0:0"
    depends_on:
      - jobmanager
    command: taskmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        rest.port: 8081
        taskmanager.numberOfTaskSlots: 2
        state.backend: rocksdb
        state.backend.incremental: true
        classloader.resolve-order: parent-first

  kafka:
    image: apache/kafka:3.9.0
    platform: linux/amd64
    restart: always
    ports:
      - 9092:9092
    hostname: kafka-broker-1
    container_name: vv-langchain-kafka
    environment:
      KAFKA_NODE_ID: 1
      CLUSTER_ID: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSITION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENERS: INTERNAL://:9094,EXTERNAL://:9092,CONTROLLER://:9093
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9094,EXTERNAL://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_LOG_DIRS: /var/lib/kafka/data
      AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD", "bash", "-c", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9094 --list | wc -l | grep 4" ]
      interval: 30s
      timeout: 10s
      retries: 5

  kafka-init:
    container_name: vv-langchain-kafka-init
    image: apache/kafka:3.9.0
    platform: linux/amd64
    depends_on:
      kafka:
        condition: service_started
    entrypoint: >
      bash -c "
        echo 'echo Trying to create topics...'
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists  --bootstrap-server kafka:9094 --partitions 1 --replication-factor 1 --topic llm-config
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists  --bootstrap-server kafka:9094 --partitions 1 --replication-factor 1 --topic user-message
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists  --bootstrap-server kafka:9094 --partitions 1 --replication-factor 1 --topic chat-memory
        /opt/kafka/bin/kafka-topics.sh --create --if-not-exists  --bootstrap-server kafka:9094 --partitions 1 --replication-factor 1 --topic ai-response
      "
    restart: on-failure
  akhq:
    image: tchiotludo/akhq
    container_name: vv-langchain-kafka-akhq
    restart: unless-stopped
    ports:
      - "8085:8080"
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9094"

  ollama:
    image: ollama/ollama:latest
    container_name: vv-langchain-ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    environment:
      - 'OLLAMA_KEEP_ALIVE=24h'
    volumes:
      - ./ollama-data:/root/.ollama
    ports:
      - "11434:11434"
  ollama-init-sources:
    image: ollama/ollama:latest
    container_name: vv-langchain-ollama-init
    volumes:
      - ./ollama-data:/root/.ollama
    entrypoint: /bin/sh
    depends_on:
      - ollama
    environment:
      - 'OLLAMA_HOST=ollama:11434'
    command:
      - "-c"
      - "sleep 3; ollama pull qwen2.5:0.5b; ollama pull nomic-embed-text:latest"

volumes:
  kafka_data:
